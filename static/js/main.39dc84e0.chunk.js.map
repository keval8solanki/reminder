{"version":3,"sources":["Assets/Icons/logout.svg","Config/FirebaseConfig.js","Components/InputForm/InputForm.js","Store/ActionCreators.js","Components/Login/Login.js","App.js","registerServiceWorker.js","Store/authReducer.js","Store/inputReducer.js","Store/rootReducer.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","settings","timestampsInSnapshots","connect","state","isCreated","inputReducer","dispatch","logoutClicked","getState","getFirebase","getFirestore","auth","signOut","then","type","createReminderHandler","data","reminderData","userCollection","currentUser","uid","collection","add","console","log","catch","e","isNotCreated","props","initialState","value","valid","useState","cleanDate","Date","selectedDate","setSelectedDate","reminderFor","setreminderFor","associateName","setassociateName","submitClicked","setsubmitClicked","chk1","setchk1","chk2","setchk2","chk3","setchk3","date","dateArr","toDateString","split","shift","join","reminderFiller","reminders","reminderPusher","sort","arr","check","push","parseInt","checkValidThenSet","func","val","target","isValid","str","charAt","toUpperCase","slice","useEffect","ToastsStore","success","isAllInputValid","checkHandler","newValid","onEnterKeyPressedHandler","keyCode","which","preventDefault","submitHandler","clearButtonHandler","eventDate","className","store","onClick","style","backgroundImage","LogoutIcon","TextField","onKeyUp","error","onChange","name","id","label","variant","utils","DateFnsUtils","margin","format","KeyboardButtonProps","FormControlLabel","checked","control","Checkbox","color","labelPlacement","Button","disabled","marginRight","authError","authReducer","loginHandler","cred","credentials","signInWithEmailAndPassword","email","password","err","noAuthError","setemail","setpassword","loginClicked","setloginClicked","test","Spinner","size","padding","component","width","height","isEmpty","isLoaded","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","isUserLoggedIn","isLoggedOut","action","isAdminLoggedIn","rootReducer","combineReducers","firebaseReducer","createStore","RootReducers","compose","applyMiddleware","thunk","withExtraArgument","reduxFirestore","firebaseConfig","reactReduxFirebase","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"yFAAAA,EAAOC,QAAU,IAA0B,oC,qRCc3CC,IAASC,cAVc,CACnBC,OAAQ,0CACRC,WAAY,+BACZC,YAAa,sCACbC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,cACnBC,MAAO,6CAIXR,IAASS,YAAYC,SAAS,CAAEC,uBAAuB,IACxCX,QAAf,E,oIC8NeY,kBAdUC,IACd,CACHC,UAAWD,EAAME,aAAaD,YAGVE,IACjB,CACHC,cAAe,IAAMD,ECxNlB,CAACA,EAAUE,GAAYC,cAAaC,mBACtBD,IACRE,OAAOC,UAAUC,KAAK,KAC3BP,EAAS,CAAEQ,KAAM,eDsNrBC,sBAAwBC,IAASV,UC/MVW,ED+MkCD,EC9MtD,CAACV,EAAUE,GAAYC,cAAaC,mBAEvC,MAAMX,EAAYW,IAEZQ,EADWT,IACeE,OAAOQ,YAAYC,IACnDrB,EAAUsB,WAAWH,GAAgBI,IAArC,eACOL,IACJJ,KAAK,KACJU,QAAQC,IAAI,SACZlB,EAAS,CAAEQ,KAAM,+BAClBW,MAAOC,IACNH,QAAQC,IAAI,gCAZOP,ODgNvBU,aAAc,IAAMrB,EAAS,CAAEQ,KAAM,kBAK9BZ,CApNI0B,IAEf,MAAMC,EAAe,CACjBC,MAAO,GACPC,OAAO,GAJc,EAQeC,mBAASC,EAAU,IAAIC,OARtC,mBAQlBC,EARkB,KAQJC,EARI,OASaJ,mBAASH,GATtB,mBASlBQ,EATkB,KASLC,EATK,OAUiBN,mBAASH,GAV1B,mBAUlBU,EAVkB,KAUHC,EAVG,OAWiBR,oBAAS,GAX1B,mBAWlBS,EAXkB,KAWHC,EAXG,OAYDV,mBAASH,GAZR,mBAYlBc,EAZkB,KAYZC,EAZY,OAaDZ,mBAASH,GAbR,mBAalBgB,EAbkB,KAaZC,EAbY,OAcDd,mBAAS,CAC7BF,MAAO,IACPC,OAAO,IAhBc,mBAclBgB,EAdkB,KAcZC,EAdY,KAiCzB,SAASf,EAAUgB,GACf,IAAIC,EAAUD,EAAKE,eAAeC,MAAM,KAExC,OADAF,EAAQG,QACDH,EAAQI,KAAK,KASxB,SAASC,IACL,IAAIC,EAAY,GAKhB,OAJIb,EAAKZ,OAAO0B,EAAeD,EAAWb,GACtCE,EAAKd,OAAO0B,EAAeD,EAAWX,GACtCE,EAAKhB,OAAO0B,EAAeD,EAAWT,GAC1CS,EAAUE,OACHF,EAGX,SAASC,EAAeE,EAAKC,GACzB,OAAOD,EAAIE,KAAKC,SAASF,EAAM9B,QAGnC,SAASiC,EAAkBrC,EAAGsC,GAC1BtB,GAAiB,GACjB,MAAMuB,EAAMvC,EAAEwC,OAAOpC,MACfqC,EAAkB,KAARF,EAtBpB,IAAoBG,EAuBhBJ,EAAK,CAAElC,OAvBSsC,EAuBSH,EAtBPG,EAAIC,OAAO,GAAGC,cACTF,EAAIG,MAAM,IAqBFxC,MAAOoC,IAzC1CK,oBAAU,KACF5C,EAAMxB,WACNqE,cAAYC,QAAQ,oBAEjB,KACH9C,EAAMD,iBAEX,CAACC,EAAMxB,YAqCV,MAAMuE,EAAkB,IAAMtC,EAAYN,OAASQ,EAAcR,QAAUY,EAAKZ,OAASc,EAAKd,OAASgB,EAAKhB,QAA2B,SAAjBI,EAMhHyC,EAAe,CAAClD,EAAGkC,EAAOI,KAC5B,MAAMa,GAAYjB,EAAM7B,MACxBiC,EAAK,CACDlC,MAAOJ,EAAEwC,OAAOpC,MAChBC,MAAO8C,KAITC,EAA4BpD,IAEjB,MADFA,EAAEqD,SAAWrD,EAAEsD,SAEtBtD,EAAEuD,iBACEN,KAAmBO,MAIzBC,EAAqB,KACvBzC,GAAiB,GACjBJ,EAAeT,GACfW,EAAiBX,GACjBe,EAAQf,GACRiB,EAAQjB,GACRO,EAAgBH,EAAU,IAAIC,QAG5BgD,EAAgB,KAClBxC,GAAiB,GACjBnB,QAAQC,IAAIW,GACZZ,QAAQC,WAAWW,GACnB,IAAInB,EAAO,CACPqB,YAAaA,EAAYP,MACzBS,cAAeA,EAAcT,MAC7BsD,UAAWjD,EACXqB,UAAWD,KAEf3B,EAAMb,sBAAsBC,GAC5BmE,KAKJ,OACI,yBAAKE,UAAU,sBACX,kBAAC,kBAAD,CAAiBC,MAAOb,gBACxB,yBAAKY,UAAU,aAAY,wBAAIA,UAAU,eAAd,YAAyC,4BAAQE,QAAS3D,EAAMrB,cAAe8E,UAAU,gBAAgBG,MAAO,CAAEC,gBAAgB,OAAD,OAASC,IAAT,SAC5J,0BAAML,UAAU,cACZ,kBAACM,EAAA,EAAD,CACIC,QAASd,EACTe,OAAQxD,EAAYN,OAASU,EAC7BX,MAAOO,EAAYP,MACnBgE,SAAWpE,GAAMqC,EAAkBrC,EAAGY,GACtCyD,KAAK,cACLC,GAAG,iBACHC,MAAM,eACNC,QAAQ,aAEZ,kBAACP,EAAA,EAAD,CACIC,QAASd,EAETe,OAAQtD,EAAcR,OAASU,EAC/BqD,SAAWpE,GAAMqC,EAAkBrC,EAAGc,GACtCV,MAAOS,EAAcT,MACrBiE,KAAK,iBACLC,GAAG,iBACHC,MAAM,mBACNC,QAAQ,aAEZ,kBAAC,IAAD,CAAyBC,MAAOC,KAC5B,kBAAC,IAAD,CACIC,OAAO,SACPL,GAAG,qBACHC,MAAM,aACNK,OAAO,aACPxE,MAAOK,EACP2D,SA3EK7C,GAAQb,EAAgBH,EAAUgB,IA4EvCsD,oBAAqB,CACjB,aAAc,kBAK1B,yBAAKlB,UAAU,gBACX,wBAAIA,UAAU,kBAAd,sCACA,kBAACmB,EAAA,EAAD,CACIZ,QAASd,EACTgB,SAAWpE,GAAMkD,EAAalD,EAAGiB,EAAMC,GACvC6D,QAAS9D,EAAKZ,MACdD,MAAM,IACN4E,QAAS,kBAACC,EAAA,EAAD,CAAUC,MAAM,YACzBX,MAAM,gBACNY,eAAe,SAEnB,kBAACL,EAAA,EAAD,CACIZ,QAASd,EACTgB,SAAWpE,GAAMkD,EAAalD,EAAGmB,EAAMC,GACvC2D,QAAS5D,EAAKd,MACdD,MAAM,IACN4E,QAAS,kBAACC,EAAA,EAAD,CAAUC,MAAM,YACzBX,MAAM,gBACNY,eAAe,SAGnB,kBAACL,EAAA,EAAD,CACIZ,QAASd,EACTgB,SAAWpE,GAAMkD,EAAalD,EAAGqB,EAAMC,GACvCyD,QAAS1D,EAAKhB,MACdD,MAAM,IACN4E,QAAS,kBAACC,EAAA,EAAD,CAAUC,MAAM,YACzBX,MAAM,mBACNY,eAAe,UAKvB,yBAAKxB,UAAU,cACX,kBAACyB,EAAA,EAAD,CAAQC,UAAWpC,IAAmBY,QAASL,EAAeM,MAAO,CAAEwB,YAAa,QAAUd,QAAQ,YAAYU,MAAM,WAAxH,mBACA,kBAACE,EAAA,EAAD,CAAQvB,QAASJ,EAAoBe,QAAQ,YAAYU,MAAM,aAA/D,c,kBE7FL1G,kBAXUC,IACd,CACH8G,UAAW9G,EAAM+G,YAAYD,YAGT3G,IACjB,CACH6G,aAAeC,IAAS9G,UDpHF+G,ECoHyBD,EDnH5C,CAAC9G,EAAUE,GAAYC,cAAaC,mBACtBD,IACRE,OAAO2G,2BACZD,EAAYE,MACZF,EAAYG,UACd3G,KAAK,KACHP,EAAS,CAAEQ,KAAM,oBAClBW,MAAOgG,IACNnH,EAAS,CAAEQ,KAAM,cAAe2G,aATdJ,OCqHtBK,YAAa,IAAMpH,EAAS,CAAEQ,KAAM,mBAG7BZ,CAtGA0B,IAEX,MAAMC,EAAe,CACjBC,MAAO,GACPC,OAAO,GAJU,EAQKC,mBAASH,GARd,mBAQd0F,EARc,KAQPI,EARO,OASW3F,mBAASH,GATpB,mBASd2F,EATc,KASJI,EATI,OAUmB5F,oBAAS,GAV5B,mBAUd6F,EAVc,KAUAC,EAVA,KA2BfhD,EAA4BpD,IAEjB,MADFA,EAAEqD,SAAWrD,EAAEsD,SAEtBtD,EAAEuD,iBACFC,MAYFA,EAAiBxD,IACnBoG,GAAgB,GAChBlG,EAAMuF,aAAa,CACfI,MAAOA,EAAMzF,MACb0F,SAAUA,EAAS1F,SAK3B,OACI,yBAAKuD,UAAU,kBACX,yBACIA,UAAU,aACV,wBAAIA,UAAU,eAAd,SACCzD,EAAMqF,UAAY,uBAAG5B,UAAU,SAAb,uBAA+C,MAEtE,0BAAMA,UAAU,oBACZ,kBAACM,EAAA,EAAD,CACIC,QAASd,EACTe,OAAQ0B,EAAMxF,OAAS8F,EACvB/G,KAAK,QACLgF,SA9CMpE,IAClBE,EAAM8F,cAENI,GAAgB,GAChB,MAAM7D,EAAMvC,EAAEwC,OAAOpC,MACfqC,EAAkB,KAARF,GAHK,kDAGsB8D,KAAK9D,GAChD0D,EAAS,CAAE7F,MAAOmC,EAAKlC,MAAOoC,KAyClB4B,KAAK,QACLE,MAAM,QACNC,QAAQ,aAEZ,kBAACP,EAAA,EAAD,CACIC,QAASd,EACTe,OAAQ2B,EAASzF,OAAS8F,EAC1B/B,SArCSpE,IACrBE,EAAM8F,cACNI,GAAgB,GAChB,MAAM7D,EAAMvC,EAAEwC,OAAOpC,MAErB8F,EAAY,CAAE9F,MAAOmC,EAAKlC,MADF,KAARkC,KAkCJnD,KAAK,WACLiF,KAAK,WACLE,MAAM,WACNC,QAAQ,aAEZ,kBAACY,EAAA,EAAD,CACIC,WAlEWQ,EAAMxF,OAASyF,EAASzF,OAmEnCwD,QAASL,EACTgB,QAAQ,YACRU,MAAM,WACLiB,IAAiBjG,EAAMqF,UAAY,kBAACe,EAAA,EAAD,CAASC,KAAK,KAAKrB,MAAM,UAAa,uBAAGpB,MAAO,CAAE0C,QAAS,IAAK7B,OAAQ,MAAlC,cCrD/EnG,kBAXUC,IAChB,CACLQ,KAAMR,EAAMb,SAASqB,OAIGL,IACnB,IAIMJ,CAzCF0B,IAIX,IAAIuG,EAAY,kBAACH,EAAA,EAAD,CAASxC,MAAO,CAAE4C,MAAO,OAAQC,OAAQ,QAAUzB,MAAM,QAAQ9F,KAAK,SAetF,OAdIc,EAAMjB,KAAKS,IACb+G,EAAY,kBAAC,EAAD,MACHvG,EAAMjB,KAAK2H,UACpBH,EAAY,kBAAC,EAAD,OAETvG,EAAMjB,KAAK4H,WACdJ,EAAY,yBAAK3C,MAAO,CACtB4C,MAAO,UACPC,OAAQ,QACRH,QAAS,UACR,kBAACF,EAAA,EAAD,CAASxC,MAAO,CAAE4C,MAAO,OAAQC,OAAQ,QAAUzB,MAAM,cAK5D,yBAAKvB,UAAU,OACZ8C,K,OClBP,MAAMK,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTlI,KAAKsI,IACJA,EAAaC,cAAgB,KAC3B,MAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,KACA,cAA3BF,EAAiBlJ,QACf6I,UAAUC,cAAcO,WAK1BjI,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAMoE,IACLtE,QAAQsE,MAAM,4CAA6CA,KC/EjE,MAAMhE,EAAe,CACjBoF,WAAW,EACXwC,gBAAgB,EAChBC,aAAa,GA8DFxC,MA3DK,CAAC/G,EAAQ0B,EAAc8H,KACvC,OAAQA,EAAO7I,MAEX,IAAK,qBAML,IAAK,eACD,OAAO,eACAX,EADP,CAEI8G,WAAW,IAGnB,IAAK,SACD,OAAO,eACA9G,EADP,CAEIuJ,aAAa,IAGrB,IAAK,QACD,OAAO,eACAvJ,EADP,CAEIyJ,iBAAiB,IAGzB,IAAK,cAED,OADArI,QAAQC,IAAI,uBACL,eACArB,EADP,CAEI8G,WAAW,IAGnB,IAAK,gBAED,OADA1F,QAAQC,IAAI,iBACL,eACArB,EADP,CAEI8G,UAAW,KACXyC,aAAa,IAIrB,IAAK,iBAED,OADAnI,QAAQC,IAAI,kBACL,eACArB,EADP,CAEI8G,UAAW,KACXyC,aAAa,IAKrB,QACI,OAAOvJ,IC5DnB,MAAM0B,EAAe,CACjBzB,WAAW,GAmBAC,MAhBM,CAACF,EAAQ0B,EAAc8H,KACxC,OAAQA,EAAO7I,MACX,IAAK,2BACD,OAAO,eACAX,EADP,CAEIC,WAAW,IAEnB,IAAK,cACD,OAAO,eACAD,EADP,CAEIC,WAAW,IAEnB,QACI,OAAOD,ICJJ0J,MANKC,YAAgB,CAChC5C,YAAaA,EACb5H,SAAUyK,kBACV1J,aAAcA,ICMlB,MAAMiF,EAAQ0E,YAAYC,EACtBC,YACIC,YAAgBC,IAAMC,kBAAkB,CAAE5J,0BAAaC,+BACvD4J,yBAAeC,GACfC,6BAAmBD,KAI3BE,IAASC,OAAO,kBAAC,IAAD,CAAUpF,MAAOA,GAAO,kBAAC,EAAD,OAAoBqF,SAASC,eAAe,SJJrE,WACb,GAA6C,kBAAmB5B,UAAW,CAGzE,GADkB,IAAI6B,IAAIC,YAAwBpC,OAAOC,UAC3CoC,SAAWrC,OAAOC,SAASoC,OAIvC,OAGFrC,OAAOsC,iBAAiB,OAAQ,KAC9B,MAAMjC,EAAK,UAAM+B,YAAN,sBAEPtC,IAiDV,SAAiCO,GAE/BkC,MAAMlC,GACHlI,KAAKqK,IAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CtC,UAAUC,cAAcsC,MAAM1K,KAAKsI,IACjCA,EAAaqC,aAAa3K,KAAK,KAC7B6H,OAAOC,SAAS8C,aAKpB3C,EAAgBC,KAGnBtH,MAAM,KACLF,QAAQC,IACN,mEArEAkK,CAAwB3C,GAIxBC,UAAUC,cAAcsC,MAAM1K,KAAK,KACjCU,QAAQC,IACN,+GAMJsH,EAAgBC,MIvBxB4C,K","file":"static/js/main.39dc84e0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logout.d463c225.svg\";","import firebase from 'firebase/app'\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBA9QoYiTBwsIhJ8_1Pzeqx9qQkePN_LkU\",\r\n    authDomain: \"quarks-d4245.firebaseapp.com\",\r\n    databaseURL: \"https://quarks-d4245.firebaseio.com\",\r\n    projectId: \"quarks-d4245\",\r\n    storageBucket: \"quarks-d4245.appspot.com\",\r\n    messagingSenderId: \"99556385294\",\r\n    appId: \"1:99556385294:web:202f667efcb4540cc1525f\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nfirebase.firestore().settings({ timestampsInSnapshots: true })\r\nexport default firebase;\r\n","import React, { useState, useEffect } from 'react'\r\n\r\n// Redux\r\nimport { connect } from 'react-redux'\r\nimport { logoutFirebase, createReminder } from '../../Store/ActionCreators';\r\n\r\n// User\r\nimport './InputForm.css'\r\nimport LogoutIcon from '../../Assets/Icons/logout.svg';\r\n\r\n// Material UI Imports\r\nimport 'date-fns';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport Button from '@material-ui/core/Button';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\r\n\r\n// Third Party\r\nimport { ToastsContainer, ToastsStore } from 'react-toasts';\r\n\r\n//----------------------------------------------------------------------------------------------------\r\n\r\n\r\n\r\nconst InputForm = (props) => {\r\n\r\n    const initialState = {\r\n        value: '',\r\n        valid: false\r\n    }\r\n\r\n\r\n    const [selectedDate, setSelectedDate] = useState(cleanDate(new Date()));\r\n    const [reminderFor, setreminderFor] = useState(initialState)\r\n    const [associateName, setassociateName] = useState(initialState)\r\n    const [submitClicked, setsubmitClicked] = useState(false)\r\n    const [chk1, setchk1] = useState(initialState)\r\n    const [chk2, setchk2] = useState(initialState)\r\n    const [chk3, setchk3] = useState({\r\n        value: '0',\r\n        valid: true\r\n    })\r\n\r\n    // Hooks Section Starts -------------------------------------------------------------------\r\n\r\n    useEffect(() => {\r\n        if (props.isCreated) {\r\n            ToastsStore.success(\"Reminder Created\")\r\n        }\r\n        return () => {\r\n            props.isNotCreated()\r\n        }\r\n    }, [props.isCreated])\r\n\r\n    // Hooks Section Ends ---------------------------------------------------------------------\r\n\r\n    // Helper Function Section Starts -------------------------------------------------------------------\r\n    function cleanDate(date) {\r\n        let dateArr = date.toDateString().split(' ')\r\n        dateArr.shift()\r\n        return dateArr.join('-')\r\n    }\r\n\r\n    function capitalize(str) {\r\n        let firstLetter = str.charAt(0).toUpperCase();\r\n        let remainingLetters = str.slice(1);\r\n        return firstLetter + remainingLetters;\r\n    }\r\n\r\n    function reminderFiller() {\r\n        let reminders = []\r\n        if (chk1.valid) reminderPusher(reminders, chk1)\r\n        if (chk2.valid) reminderPusher(reminders, chk2)\r\n        if (chk3.valid) reminderPusher(reminders, chk3)\r\n        reminders.sort()\r\n        return reminders\r\n    }\r\n\r\n    function reminderPusher(arr, check) {\r\n        return arr.push(parseInt(check.value));\r\n    }\r\n\r\n    function checkValidThenSet(e, func) {\r\n        setsubmitClicked(false)\r\n        const val = e.target.value;\r\n        const isValid = val !== '';\r\n        func({ value: capitalize(val), valid: isValid })\r\n    }\r\n\r\n    const isAllInputValid = () => reminderFor.valid && associateName.valid && (chk1.valid || chk2.valid || chk3.valid) && selectedDate !== 'Date';\r\n\r\n    // Helper Function Section Ends ---------------------------------------------------------------------\r\n\r\n    // Handler Section Starts -------------------------------------------------------------------\r\n    const handleDateChange = date => setSelectedDate(cleanDate(date));\r\n    const checkHandler = (e, check, func) => {\r\n        const newValid = !check.valid\r\n        func({\r\n            value: e.target.value,\r\n            valid: newValid\r\n        })\r\n    }\r\n\r\n    const onEnterKeyPressedHandler = (e) => {\r\n        let code = e.keyCode || e.which;\r\n        if (code === 13) {\r\n            e.preventDefault();\r\n            if (isAllInputValid()) submitHandler()\r\n        }\r\n    }\r\n\r\n    const clearButtonHandler = () => {\r\n        setsubmitClicked(false)\r\n        setreminderFor(initialState)\r\n        setassociateName(initialState)\r\n        setchk1(initialState)\r\n        setchk2(initialState)\r\n        setSelectedDate(cleanDate(new Date()))\r\n    }\r\n\r\n    const submitHandler = () => {\r\n        setsubmitClicked(true);\r\n        console.log(selectedDate)\r\n        console.log(typeof selectedDate)\r\n        let data = {\r\n            reminderFor: reminderFor.value,\r\n            associateName: associateName.value,\r\n            eventDate: selectedDate,\r\n            reminders: reminderFiller()\r\n        }\r\n        props.createReminderHandler(data)\r\n        clearButtonHandler()\r\n    }\r\n    // Handler Section Ends ---------------------------------------------------------------------\r\n\r\n\r\n    return (\r\n        <div className=\"inputForm-main-div\">\r\n            <ToastsContainer store={ToastsStore} />\r\n            <div className=\"title-div\"><h2 className=\"title-login\">Reminder</h2><button onClick={props.logoutClicked} className=\"logout-button\" style={{ backgroundImage: `url(${LogoutIcon})` }}></button></div>\r\n            <form className=\"input-form\">\r\n                <TextField\r\n                    onKeyUp={onEnterKeyPressedHandler}\r\n                    error={!reminderFor.valid && submitClicked}\r\n                    value={reminderFor.value}\r\n                    onChange={(e) => checkValidThenSet(e, setreminderFor)}\r\n                    name=\"reminderFor\"\r\n                    id=\"outlined-basic\"\r\n                    label=\"Reminder For\"\r\n                    variant=\"outlined\" />\r\n\r\n                <TextField\r\n                    onKeyUp={onEnterKeyPressedHandler}\r\n\r\n                    error={!associateName.valid && submitClicked}\r\n                    onChange={(e) => checkValidThenSet(e, setassociateName)}\r\n                    value={associateName.value}\r\n                    name=\"associatedName\"\r\n                    id=\"outlined-basic\"\r\n                    label=\"Associated Name \"\r\n                    variant=\"outlined\" />\r\n\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                    <KeyboardDatePicker\r\n                        margin=\"normal\"\r\n                        id=\"date-picker-dialog\"\r\n                        label=\"Event Date\"\r\n                        format=\"MM-dd-yyyy\"\r\n                        value={selectedDate}\r\n                        onChange={handleDateChange}\r\n                        KeyboardButtonProps={{\r\n                            'aria-label': 'change date',\r\n                        }}\r\n                    />\r\n                </MuiPickersUtilsProvider>\r\n\r\n                <div className=\"checkbox-div\">\r\n                    <h4 className=\"checkbox-title\">When do you want us to remind you?</h4>\r\n                    <FormControlLabel\r\n                        onKeyUp={onEnterKeyPressedHandler}\r\n                        onChange={(e) => checkHandler(e, chk1, setchk1)}\r\n                        checked={chk1.valid}\r\n                        value=\"7\"\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"7 Days Before\"\r\n                        labelPlacement=\"left\"\r\n                    />\r\n                    <FormControlLabel\r\n                        onKeyUp={onEnterKeyPressedHandler}\r\n                        onChange={(e) => checkHandler(e, chk2, setchk2)}\r\n                        checked={chk2.valid}\r\n                        value=\"3\"\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"3 Days Before\"\r\n                        labelPlacement=\"left\"\r\n                    />\r\n\r\n                    <FormControlLabel\r\n                        onKeyUp={onEnterKeyPressedHandler}\r\n                        onChange={(e) => checkHandler(e, chk3, setchk3)}\r\n                        checked={chk3.valid}\r\n                        value=\"0\"\r\n                        control={<Checkbox color=\"primary\" />}\r\n                        label=\"On the event day\"\r\n                        labelPlacement=\"left\"\r\n\r\n                    />\r\n\r\n                </div>\r\n                <div className=\"button-div\">\r\n                    <Button disabled={!isAllInputValid()} onClick={submitHandler} style={{ marginRight: '10px' }} variant=\"contained\" color=\"primary\">Create Reminder</Button>\r\n                    <Button onClick={clearButtonHandler} variant=\"contained\" color=\"secondary\">Clear</Button>\r\n                </div>\r\n\r\n            </form>\r\n\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isCreated: state.inputReducer.isCreated\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        logoutClicked: () => dispatch(logoutFirebase()),\r\n        createReminderHandler: (data) => dispatch(createReminder(data)),\r\n        isNotCreated: () => dispatch({ type: 'NOT_CREATED' })\r\n\r\n\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InputForm);\r\n","export const loginFirebase = (credentials) => {\r\n    return (dispatch, getState, { getFirebase, getFirestore }) => {\r\n        const firebase = getFirebase();\r\n        firebase.auth().signInWithEmailAndPassword(\r\n            credentials.email,\r\n            credentials.password\r\n        ).then(() => {\r\n            dispatch({ type: 'LOGIN_SUCCESS' })\r\n        }).catch((err) => {\r\n            dispatch({ type: 'LOGIN_ERROR', err })\r\n        })\r\n    }\r\n}\r\n\r\nexport const logoutFirebase = () => {\r\n    return (dispatch, getState, { getFirebase, getFirestore }) => {\r\n        const firebase = getFirebase();\r\n        firebase.auth().signOut().then(() => {\r\n            dispatch({ type: 'LOGOUT' })\r\n        })\r\n    }\r\n}\r\n\r\n//\r\n\r\nexport const createReminder = (reminderData) => {\r\n    return (dispatch, getState, { getFirebase, getFirestore }) => {\r\n\r\n        const firestore = getFirestore();\r\n        const firebase = getFirebase()\r\n        const userCollection = firebase.auth().currentUser.uid\r\n        firestore.collection(userCollection).add({\r\n            ...reminderData\r\n        }).then(() => {\r\n            console.log('Added')\r\n            dispatch({ type: 'REMINDER_CREATED_SUCCESS' })\r\n        }).catch((e) => {\r\n            console.log(\"ERROR_CREATING_REMINDER\")\r\n        })\r\n    }\r\n}\r\n\r\n\r\n","// React\r\nimport React, { useState } from 'react'\r\n\r\n// Redux\r\nimport { connect } from 'react-redux'\r\nimport { loginFirebase } from '../../Store/ActionCreators';\r\n\r\n// User\r\nimport './Login.css'\r\n\r\n// React Starp (BootStrap)\r\nimport { Spinner } from 'reactstrap';\r\n\r\n// Material UI\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nconst Login = (props) => {\r\n\r\n    const initialState = {\r\n        value: '',\r\n        valid: false\r\n    }\r\n\r\n    // Hooks\r\n    const [email, setemail] = useState(initialState)\r\n    const [password, setpassword] = useState(initialState)\r\n    const [loginClicked, setloginClicked] = useState(false)\r\n\r\n    // Helper Function Section Starts -------------------------------------------------------------------\r\n    const isInputValid = () => email.valid && password.valid;\r\n    // Helper Function Section Ends ---------------------------------------------------------------------\r\n\r\n\r\n    // Handler Section Starts -------------------------------------------------------------------\r\n    const emailHandler = (e) => {\r\n        props.noAuthError();\r\n        const emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\r\n        setloginClicked(false)\r\n        const val = e.target.value\r\n        const isValid = val !== '' && emailPattern.test(val);\r\n        setemail({ value: val, valid: isValid })\r\n    }\r\n\r\n    const onEnterKeyPressedHandler = (e) => {\r\n        let code = e.keyCode || e.which;\r\n        if (code === 13) {\r\n            e.preventDefault();\r\n            submitHandler();\r\n        }\r\n    }\r\n\r\n    const passwordHandler = (e) => {\r\n        props.noAuthError();\r\n        setloginClicked(false)\r\n        const val = e.target.value\r\n        const isValid = val !== '';\r\n        setpassword({ value: val, valid: isValid })\r\n    }\r\n\r\n    const submitHandler = (e) => {\r\n        setloginClicked(true)\r\n        props.loginHandler({\r\n            email: email.value,\r\n            password: password.value\r\n        })\r\n    }\r\n    // Handler Section Ends ---------------------------------------------------------------------\r\n\r\n    return (\r\n        <div className=\"login-main-div\">\r\n            <div\r\n                className=\"title-div\">\r\n                <h2 className=\"title-login\">Login</h2>\r\n                {props.authError ? <p className=\"error\">Invalid Credentials</p> : null}\r\n            </div>\r\n            <form className=\"input-form-login\">\r\n                <TextField\r\n                    onKeyUp={onEnterKeyPressedHandler}\r\n                    error={!email.valid && loginClicked}\r\n                    type=\"email\"\r\n                    onChange={emailHandler}\r\n                    name=\"email\"\r\n                    label=\"Email\"\r\n                    variant=\"outlined\" />\r\n\r\n                <TextField\r\n                    onKeyUp={onEnterKeyPressedHandler}\r\n                    error={!password.valid && loginClicked}\r\n                    onChange={passwordHandler}\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    label=\"Password\"\r\n                    variant=\"outlined\" />\r\n\r\n                <Button\r\n                    disabled={!isInputValid()}\r\n                    onClick={submitHandler}\r\n                    variant=\"contained\"\r\n                    color=\"primary\">\r\n                    {loginClicked && !props.authError ? <Spinner size=\"sm\" color=\"light\" /> : <p style={{ padding: '0', margin: '0' }}>Login</p>}\r\n                </Button>\r\n\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        authError: state.authReducer.authError\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        loginHandler: (cred) => dispatch(loginFirebase(cred)),\r\n        noAuthError: () => dispatch({ type: 'NO_AUTHERROR' })\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport InputForm from './Components/InputForm/InputForm';\nimport Login from './Components/Login/Login';\nimport { Spinner } from 'reactstrap';\n\nconst app = (props) => {\n\n\n\n  let component = <Spinner style={{ width: '3rem', height: '3rem' }} color=\"light\" type=\"grow\" />\n  if (props.auth.uid) {\n    component = <InputForm />\n  } else if (props.auth.isEmpty) {\n    component = <Login />\n  }\n  if (!props.auth.isLoaded) {\n    component = <div style={{\n      width: 'inherit',\n      height: '500px',\n      padding: '128px'\n    }}><Spinner style={{ width: '6rem', height: '6rem' }} color=\"primary\" /></div>\n  }\n\n\n  return (\n    <div className=\"App\">\n      {component}\n    </div>\n  );\n\n}\n\n\n\n\nconst mapStateToProps = (state) => {\n  return {\n    auth: state.firebase.auth\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(app);\n\n\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\r\n    authError: false,\r\n    isUserLoggedIn: false,\r\n    isLoggedOut: true\r\n}\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n        case 'LOGIN_BACK_CLICKED':\r\n            return {\r\n                ...state,\r\n                authError: false\r\n            }\r\n\r\n        case 'NO_AUTHERROR':\r\n            return {\r\n                ...state,\r\n                authError: false\r\n            }\r\n\r\n        case 'LOGOUT':\r\n            return {\r\n                ...state,\r\n                isLoggedOut: true\r\n            }\r\n\r\n        case 'ADMIN':\r\n            return {\r\n                ...state,\r\n                isAdminLoggedIn: true\r\n            }\r\n\r\n        case 'LOGIN_ERROR':\r\n            console.log('Invalid Credentials')\r\n            return {\r\n                ...state,\r\n                authError: true\r\n            }\r\n\r\n        case 'LOGIN_SUCCESS':\r\n            console.log('Login Success')\r\n            return {\r\n                ...state,\r\n                authError: null,\r\n                isLoggedOut: false\r\n\r\n            }\r\n\r\n        case 'SIGNUP_SUCCESS':\r\n            console.log('Signup Success')\r\n            return {\r\n                ...state,\r\n                authError: null,\r\n                isLoggedOut: false\r\n\r\n            }\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport default authReducer;","const initialState = {\r\n    isCreated: false\r\n}\r\n\r\nconst inputReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'REMINDER_CREATED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                isCreated: true\r\n            }\r\n        case 'NOT_CREATED':\r\n            return {\r\n                ...state,\r\n                isCreated: false\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default inputReducer;","import authReducer from './authReducer';\r\nimport inputReducer from './inputReducer';\r\nimport { combineReducers } from 'redux'\r\n//import { firestoreReducer } from 'redux-firestore';\r\nimport { firebaseReducer } from 'react-redux-firebase';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    authReducer: authReducer,\r\n    firebase: firebaseReducer,\r\n    inputReducer: inputReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { reactReduxFirebase, getFirebase } from 'react-redux-firebase';\nimport { reduxFirestore, getFirestore } from 'redux-firestore';\n\nimport firebaseConfig from './Config/FirebaseConfig';\n\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport registerServiceWorker from './registerServiceWorker';\nimport RootReducers from './Store/rootReducer';\n\nconst store = createStore(RootReducers,\n    compose(\n        applyMiddleware(thunk.withExtraArgument({ getFirebase, getFirestore })),\n        reduxFirestore(firebaseConfig),\n        reactReduxFirebase(firebaseConfig)\n    )\n);\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\nregisterServiceWorker();\n\n"],"sourceRoot":""}